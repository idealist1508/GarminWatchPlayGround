using System;
using Garmin.Ble.Lib.Messages;
using Xunit;

namespace Garmin.Ble.Lib.Tests;

public class GfdiPacketParserTest
{
    [Fact]
    public void TestParse()
    {
        var parser = new GfdiPacketParser(new ConsoleLogger());
        parser.ReceivedBytes(new byte[]
        {
            0x00, 0x02, 0x21, 0x04, 0xa0, 0x13, 0x6f, 0x0b, 0xd4, 0x0a, 0xe8, 0xa5, 0xb2, 0xed, 0xc2, 0x01, 0x08, 0x02,
            0x0e, 0x0c
        });
        Assert.Null(parser.RetrievePacket());
        parser.ReceivedBytes(new byte[]
            { 0x76, 0xc3, 0xad, 0x76, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x48, 0x52, 0x03, 0x87, 0xd4, 0x00 });
        var packet = parser.RetrievePacket();
        Assert.NotNull(packet);
        Assert.Equal(
            new byte[]
            {
                0x21, 0x00, 0xa0, 0x13, 0x6f, 0x00, 0xd4, 0x0a, 0xe8, 0xa5, 0xb2, 0xed, 0xc2, 0x01, 0x08, 0x02, 0x00,
                0x0c, 0x76, 0xc3, 0xad, 0x76, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x48, 0x52, 0x00, 0x87, 0xd4
            }, packet);
        Assert.Null(parser.RetrievePacket());
    }

    [Fact]
    public void TestParse2()
    {
        var parser = new GfdiPacketParser(new ConsoleLogger());
        parser.ReceivedBytes(new byte[]
        {
            0x00, 0x02, 0x2d, 0x05, 0x88, 0x13, 0xa0, 0x13, 0x02, 0x70, 0x05, 0xff, 0xff, 0x39, 0x30, 0x01, 0x02, 0x9a,
            0x01, 0x1c, 0x40, 0x0b, 0x58, 0x5a, 0x31, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x04, 0x53, 0x6f,
            0x6e, 0x79, 0x05, 0x47, 0x38, 0x34, 0x34, 0x31, 0x01, 0xc3, 0x7b, 0x00
        });
        var packet = parser.RetrievePacket();
        Assert.NotNull(packet);
        packet = parser.RetrievePacket();
        Assert.Null(packet);
    }

    [Fact]
    public void TestParse3()
    {
        var parser = new GfdiPacketParser(new ConsoleLogger());
        parser.ReceivedBytes(new byte[]
        {
            0x00, 0x05, 0x03, 0x02, 0x8c, 0x13, 0x03, 0x6b, 0xb0, 0x01, 0x01, 0x01, 0xff, 0x3c, 0x3f, 0x78, 0x6d, 0x6c,
            0x20, 0x76,
            0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64,
            0x69, 0x6e,
            0x67, 0x3d, 0x22, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x3f, 0x3e, 0x3c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
            0x20, 0x78,
            0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
            0x61, 0x72,
            0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x6c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
            0x2f, 0x47,
            0x61, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x22, 0x20, 0x78, 0x6d,
            0x6c, 0x6e,
            0x73, 0x3a, 0x78, 0x73, 0x69, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
            0x77, 0x33,
            0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x32, 0x30, 0x30, 0x31, 0x2f, 0x58, 0x4d, 0x4c, 0x53, 0x63, 0x68, 0x65, 0x6d,
            0x61, 0x2d,
            0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x78, 0x73, 0x69, 0x3a, 0x73, 0x63, 0x68, 0x65,
            0x6d, 0x61,
            0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
            0x77, 0x77,
            0x2e, 0x67, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x6d, 0x6c, 0x73, 0x63, 0x68,
            0x65, 0x6d,
            0x61, 0x73, 0x2f, 0x47, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x32,
            0x20, 0x68,
            0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
            0x6f, 0x6d,
            0x2f, 0x78, 0x6d, 0x6c, 0x73, 0x63, 0x68, 0xfb, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x47, 0x61, 0x72, 0x6d, 0x69,
            0x6e, 0x44,
            0x65, 0x76, 0x69, 0x63, 0x65, 0x76, 0x32, 0x2e, 0x78, 0x73, 0x64, 0x22, 0x3e, 0x0a, 0x3c, 0x4d, 0x6f, 0x64,
            0x65, 0x6c,
            0x3e, 0x3c, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3e, 0x30, 0x30, 0x36, 0x2d, 0x42,
            0x32, 0x37,
            0x37, 0x32, 0x2d, 0x30, 0x30, 0x3c, 0x2f, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3e,
            0x3c, 0x53,
            0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x34, 0x35, 0x30,
            0x3c, 0x2f,
            0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x44,
            0x65, 0x73,
            0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x76, 0xc3, 0xad, 0x76, 0x6f, 0x6d, 0x6f, 0x76, 0x65,
            0x20, 0x48,
            0x52, 0x3c, 0x2f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x2f, 0x4d,
            0x6f, 0x64,
            0x65, 0x6c, 0x3e, 0x3c, 0x49, 0x64, 0x3e, 0x33, 0x39, 0x38, 0x37, 0x39, 0x30, 0x38, 0x30, 0x37, 0x32, 0x3c,
            0x2f, 0x49,
            0x64, 0x3e, 0x3c, 0x4d, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
            0x3e, 0x0a,
            0x3c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3e, 0x3c, 0x4e, 0x61, 0x6d, 0x65, 0x3e, 0x46, 0x49,
            0x54, 0x42,
            0x69, 0x6e, 0x61, 0x72, 0x79, 0x3c, 0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x3e, 0x3c, 0x46, 0x69, 0x6c, 0x65, 0x3e,
            0x3c, 0x53,
            0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x49, 0x64, 0x28, 0x0b,
            0x00
        });
        var packet = parser.RetrievePacket();
        Assert.NotNull(packet);
        packet = parser.RetrievePacket();
        Assert.Null(packet);

    }

    [Fact]
    public void TestParse4()
    {
        var parser = new GfdiPacketParser(new ConsoleLogger());
        parser.ReceivedBytes(new byte[]
        {
            0x00, 0x05, 0x03, 0x02, 0x8c, 0x13, 0x05, 0x4d, 0x6c, 0xb0, 0x0f, 0x01, 0x27, 0x04, 0xc3, 0x3c, 0xcf, 0xb9,
            0x5f, 0xb2,
            0x5f, 0xb7, 0x1f, 0xb6, 0x8e, 0x3f, 0x90, 0xb3, 0x8b, 0xb3, 0xaf, 0x3e, 0xe2, 0x54, 0x04, 0xdd, 0x37, 0xcf,
            0xb7, 0x07,
            0xb2, 0xa1, 0xb6, 0x1e, 0xb5, 0xb0, 0x3d, 0x68, 0xb4, 0xec, 0xb1, 0x01, 0x14, 0x01, 0x55, 0x04, 0x8e, 0x32,
            0xb8, 0xb4,
            0x63, 0xb1, 0x89, 0xb5, 0xda, 0xb4, 0x2e, 0x3c, 0x83, 0xb4, 0xe5, 0xb1, 0x01, 0x7d, 0x15, 0x55, 0x04, 0x73,
            0x3a, 0x64,
            0xb8, 0x2a, 0xb0, 0xfd, 0xb4, 0x5f, 0xb4, 0x4b, 0x3d, 0x0b, 0xb1, 0x72, 0xb1, 0x1a, 0x40, 0x14, 0x55, 0x04,
            0xfd, 0x3e,
            0x9a, 0xbd, 0x68, 0xba, 0xf9, 0xbc, 0xa5, 0xbc, 0xa3, 0x43, 0x01, 0xbc, 0xa3, 0xba, 0x28, 0x44, 0x66, 0x54,
            0x04, 0xcd,
            0x44, 0x40, 0xc2, 0x17, 0xc0, 0x3c, 0xc3, 0x3f, 0xc3, 0xe1, 0x48, 0xaf, 0xc1, 0x87, 0xc0, 0x2a, 0x47, 0x55,
            0x55, 0x04,
            0x4d, 0x43, 0xdc, 0xbf, 0xb8, 0xb8, 0xce, 0xbc, 0x13, 0xbc, 0xe8, 0x44, 0xbb, 0xb8, 0xc6, 0xb9, 0x48, 0x42,
            0x93, 0x55,
            0x04, 0xba, 0x42, 0x69, 0xbf, 0x5f, 0xba, 0x28, 0xbe, 0x84, 0xbd, 0x03, 0x45, 0x09, 0xbc, 0x66, 0xbb, 0xd3,
            0x42, 0x6c,
            0x55, 0x04, 0x84, 0x39, 0x37, 0xb8, 0x77, 0xb4, 0xcd, 0xb8, 0xad, 0xb7, 0xee, 0x3f, 0xc3, 0xb6, 0x93, 0xb4,
            0x01, 0x14,
            0x26, 0x55, 0x04, 0xff, 0x1d, 0x0b, 0xb1, 0xbf, 0x31, 0x5e, 0xa5, 0xc3, 0xa7, 0x56, 0x30, 0xe1, 0x2e, 0x01,
            0x32, 0x01,
            0x29, 0x0e, 0x55, 0x04, 0x47, 0x3d, 0x28, 0xb9, 0xb0, 0xa8, 0xbd, 0xb3, 0x2d, 0xb4, 0x40, 0x3d, 0x89, 0xa5,
            0x73, 0xaf,
            0x14, 0x41, 0xaa, 0x54, 0x04, 0xca, 0x3d, 0x3e, 0xbb, 0xf4, 0xb2, 0xe0, 0xb8, 0xce, 0xb6, 0x94, 0x40, 0x6a,
            0xb4, 0x24,
            0xb4, 0x01, 0xff, 0xe0, 0x54, 0x04, 0x98, 0x43, 0x8b, 0xbf, 0xe5, 0xb5, 0x85, 0xbb, 0x99, 0xb9, 0x6d, 0x44,
            0xa1, 0xb4,
            0x9d, 0xb7, 0xcc, 0x44, 0x31, 0x55, 0x04, 0x08, 0x44, 0x58, 0xbf, 0x9b, 0xb8, 0xb9, 0xbc, 0x38, 0xbc, 0xe0,
            0x44, 0xa4,
            0xb8, 0xc8, 0xb9, 0xb4, 0x45, 0x35, 0x55, 0x04, 0xbf, 0x45, 0x94, 0xc1, 0x55, 0xb9, 0x0f, 0xbe, 0x2b, 0xbd,
            0x34, 0x46,
            0x12, 0xb9, 0x1d, 0xbb, 0x87, 0x48, 0xf8, 0x54, 0x04, 0x46, 0x40, 0x0b, 0xbc, 0xa2, 0xb5, 0xb4, 0xb9, 0x4f,
            0xb9, 0x9b,
            0x41, 0x5f, 0xb6, 0x1a, 0xb7, 0x3d, 0x40, 0xf0, 0x54, 0x04, 0x7f, 0x47, 0x9f, 0xc3, 0xa1, 0xbc, 0x6e, 0xc0,
            0xf2, 0xbf,
            0x4a, 0x48, 0x7b, 0xbc, 0xc5, 0xbd, 0x40, 0x48, 0xc6, 0x54, 0x03, 0x88, 0x96, 0xc7, 0x37, 0x01, 0x03, 0xc4,
            0x96, 0xc7,
            0x37, 0x01, 0x04, 0x14, 0x43, 0x1c, 0xc0, 0x9c, 0xba, 0x53, 0xbe, 0x76, 0xbd, 0x66, 0x45, 0xff, 0xbb, 0x81,
            0xbb, 0x24,
            0x43, 0x44, 0x55, 0x04, 0xa4, 0x40, 0xcb, 0xbc, 0x7e, 0xb5, 0x15, 0xba, 0x13, 0xb9, 0x45, 0x42, 0xb2, 0xb5,
            0x6e, 0xb6,
            0xcf, 0x40, 0xc0, 0x54, 0x04, 0xc9, 0x40, 0xd7, 0xbc, 0xb2, 0xb6, 0xce, 0xba, 0x2a, 0xba, 0x75, 0x42, 0xc9,
            0xb7, 0x2d,
            0xb8, 0xc4, 0x41, 0xf3, 0x54, 0x04, 0xf1, 0x42, 0xfd, 0xbe, 0x2e, 0xb9, 0x3d, 0xbd, 0xa5, 0xbc, 0xc3, 0x44,
            0xff, 0xb9,
            0x39, 0xba, 0x34, 0x44, 0x88, 0x54, 0x04, 0x8b, 0x42, 0x25, 0xbf, 0xc5, 0xba, 0x4e, 0xbe, 0xcf, 0xbd, 0x1d,
            0x45, 0x5c,
            0xbc, 0xe1, 0xbb, 0x74, 0x43, 0x4f, 0x55, 0x04, 0x49, 0x40, 0x49, 0xbc, 0xa3, 0xb4, 0x58, 0xb9, 0x9b, 0xb8,
            0x90, 0x41,
            0xf2, 0xb4, 0xdf, 0xb5, 0x12, 0x41, 0xd5, 0x54, 0x04, 0xdc, 0x3d, 0xde, 0xb9, 0x11, 0xb5, 0x6f, 0x23, 0x00
        });
        var packet = parser.RetrievePacket();
        Assert.NotNull(packet);
        Assert.Equal(0x0203, packet!.Length);
        packet = parser.RetrievePacket();
        Assert.Null(packet);

        parser.ReceivedBytes(new byte[]
        {
            0x00, 0x05, 0xad, 0x01, 0x8c, 0x13, 0x03, 0xbe, 0x4f, 0x01, 0x01, 0x01, 0x01, 0x03, 0x90, 0x01, 0x01, 0x01,
            0x01, 0x01
        });
        packet = parser.RetrievePacket();
        Assert.Null(packet);
    }

    [Fact]
    public void TestWrap()
    {
        var packet = GfdiPacketParser.WrapMessageToPacket(new byte[]
        {
            0x21, 0x00, 0xa0, 0x13, 0x6f, 0x00, 0xd4, 0x0a, 0xe8, 0xa5, 0xb2, 0xed, 0xc2, 0x01, 0x08, 0x02, 0x00, 0x0c,
            0x76, 0xc3, 0xad, 0x76, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x48, 0x52, 0x00, 0x87, 0xd4
        });

        Assert.Equal(
            new byte[]
            {
                0x00, 0x02, 0x21, 0x04, 0xa0, 0x13, 0x6f, 0x0b, 0xd4, 0x0a, 0xe8, 0xa5, 0xb2, 0xed, 0xc2, 0x01, 0x08,
                0x02, 0x0e, 0x0c, 0x76, 0xc3, 0xad, 0x76, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x48, 0x52, 0x03, 0x87,
                0xd4, 0x00
            }, packet);
    }

    [Fact]
    public void TestRoundtrip()
    {
        var message = new DeviceInformationResponseMessage(GarminConstants.STATUS_ACK, 112, -1,
            GarminConstants.GADGETBRIDGE_UNIT_NUMBER, 123, 16384, "BT", "Test", "Model", 1);
        MakeRoundtripTest(message.Packet);

        var longPacket = new byte[500];
        Array.Fill(longPacket, (byte)0xAB);
        MakeRoundtripTest(longPacket);

        var exactlyLongPacket = new byte[254];
        Array.Fill(exactlyLongPacket, (byte)0xAB);
        MakeRoundtripTest(exactlyLongPacket);

        MakeRoundtripTest(new byte[2]);

        MakeRoundtripTest(new byte[]
            { 0x0e, 0x00, 0x88, 0x13, 0x8c, 0x13, 0x00, 0x00, 0x1a, 0x2d, 0x00, 0x00, 0x0b, 0x00 });
    }

    private static void MakeRoundtripTest(byte[] packet)
    {
        var parser = new GfdiPacketParser(new ConsoleLogger());
        var bytes = GfdiPacketParser.WrapMessageToPacket(packet);
        parser.ReceivedBytes(bytes);

        var parsedPacket = parser.RetrievePacket();
        Assert.NotNull(parsedPacket);

        Assert.Equal(packet, parsedPacket);
    }
}